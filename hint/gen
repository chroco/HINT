#!/usr/local/bin/perl

# gen.pl is used to generate various functions
# which function, depends on parameter
# it is not now, but it should be a general storage of such functions

# @gnames stores the names of the variable, funct var first 

require "getopt.pl";

$opt_count = 0;			# count of table entries

sub rnd {
  local($a, $b) = @_;

  return rand() * ($b - $a) + $a;
}

sub gen_head {
  local(@names) = @_;
  @gnames = @names;

#  foreach $i (@names) {
#    print "add var $i\n";
#  }
#  print "fam $names[$#names] for $names[$#names] is {$names[0]";
  print "$names[$#names] depends on {$names[0]";
  foreach $i (1..$#names-1) {
    print ", $names[$i]";
  }
  print "}\n";
}

sub gen_desc_bin {
  local(@names) = @_;

  foreach $i (@names) {
    print "$i in {0,1}\n";
  }
}

sub gen_desc_num {
  local(@names) = @_;

  for ($i=0; $i<$#names; $i=$i+2) {
    print "$names[$i] in {";
    foreach $j (0..$names[$i+1]-2) {
      print "$j,";
    }
    print $names[$i+1]-1, "}\n";
  }
}

sub gen_entry {
  local($n, @vals) = @_;
  print "undef opt\n";
  foreach $i (0..$n-1) {
    print "$gnames[$i+1] = $vals[$i]\n";
  }
  print "expect $gnames[0]=$vals[$n]\n";
  print "set opt o$opt_count\n\n";
  $opt_count++;
}

########################################################################
# SAMPLED REAL FUNCTION
# functions in R domain, entries generated by random, user specifies a
# number of entries

sub saw {
  print "\# saw function\n";
  &gen_head('x','y');

  foreach $i (0..$n_opt-1) {
    $x = &rnd(-1.5,2);
    if ($x>=0.5) {
      $y = 2 * $x - 2;
    }
    elsif ($x<=-0.5) {
      $y = 2 * $x + 2;
    }
    else {
      $y = -2 * $x;
    }
    $y += &rnd(-0.25, 0.25);	# noise
    &gen_entry(1, $x, $y);
  }
}

sub r0 {
  foreach $i (0..$n_opt-1) {
    $a = &rnd(0,2);
    $b = &rnd(0,2);
    $y = $a + $b;
    printf("%8.3lf %8.3lf %8.3lf\n", $a, $b, $y);
  }
}

sub r1 {
  foreach $i (0..$n_opt-1) {
    $a = &rnd(0,2);
    $b = &rnd(0,2);
    $c = &rnd(0,2);
    $y = $a + $b * $c;
    printf("%8.3lf %8.3lf %8.3lf %8.3lf\n", $a, $b, $c, $y);
  }
}

########################################################################
# BOOLEAN FUNCTIONS
# complete set of examples is provided (all combinations of attributes
# are given

sub XOR {
  ($x, $y) = @_;
  return (($x && !$y) || (!$x && $y));
}

sub b0 {
  print "\# b0:   y(a,b,c) = a AND (b XOR c)\n";
  &gen_head('a','b','c','y');
  &gen_desc_bin('a','b','c','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	$y = $a && (&XOR($b,$c));
	print "\n  $a $b $c ", $y==0?"0":"1" ;
      }
    }
  }
  print "}\n";
}

sub b1 {
  print "\# b1:   y(a,b,c,d) = a OR (b XOR c) AND d\n";
  &gen_head('a','b','c','d','y');
  &gen_desc_bin('a','b','c','d','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  $y = $a || ((&XOR($b,$c)) && $d);
	  print "\n  $a $b $c $d ", $y==0?"0":"1" ;
	}
      }
    }
  }
  print "}\n";
}

sub b2 {
  print "\# b2:   y(a,b,c,d) = a AND (b XOR c)\n";
  &gen_head('a','e','b','f','c','d','y');
  &gen_desc_bin('a','d','e','f','y');
  print "b in {0,1,2}\n";
  print "c in {0,1,2,3,4}\n";

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $e (0..1) {
      foreach $b (0..2) {
	foreach $f (0..1) {
	  foreach $c (0..4) {
	    foreach $d (0..1) {
	      $y = $a && (&XOR($b,$c));
	      print "\n  $a $e $b $f $c $d ", $y==0?"0":"1" ;
	    }
	  }
	}
      }
    }
  }
  print "}\n";
}

sub b3 {
  print "\# b3:   y(a,b,c,d,e,f,g,h) = a OR (b XOR c) AND d\n";
  &gen_head('a','e','f','b','c','d','g','y');
  &gen_desc_bin('a','b','d','e','f','g','y');
  print "c in {0,1,2}\n";

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $e (0..1) {
      foreach $f (0..1) {
	foreach $b (0..1) {
	  foreach $c (0..2) {
	    foreach $d (0..1) {
	      foreach $g (0..1) {
		$y = $a || ((&XOR($b,$c)) && $d);
		print "\n  $a $e $f $b $c $d $g ", $y==0?"0":"1" ;
	      }
	    }
	  }
	}
      }
    }
  }
  print "}\n";
}


sub b4 {
  print "\# b4:   y(a,b,c) = a AND (b OR c)\n";
  &gen_head('a','b','c','y');
  &gen_desc_bin('a','b','c','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	$y = $a && ($b || $c);
	print "\n  $a $b $c ", $y==0?"0":"1" ;
      }
    }
  }
  print "}\n";
}

sub b5 {
  print "\# b5:   y(a,b,c,d) = (a OR b) AND c AND (d OR e)\n";
  &gen_head('a','b','c','d','e','y');
  &gen_desc_bin('a','b','c','d','e','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  foreach $e (0..1) {
	    $y = ($a || $b) && ($c && ($d || $e));
	    print "\n  $a $b $c $d $e ", $y==0?"0":"1" ;
	  }
	}
      }
    }
  }
  print "}\n";
}

sub b55 {
  print "\# b55:   y(a,b,c,d) = (a OR b) AND c AND (d XOR e)\n";
  &gen_head('a','b','c','d','e','y');
  &gen_desc_bin('a','b','c','d','e','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  foreach $e (0..1) {
	    $y = ($a || $b) && ($c && &XOR($d,$e));
	    print "\n  $a $b $c $d $e ", $y==0?"0":"1" ;
	  }
	}
      }
    }
  }
  print "}\n";
}

sub b6 {
  print "\# b6:   y(a,b,c,d,e,f,g) =  ((a XOR b) OR (c XOR d)) XOR (e AND (f XOR g))\n";
  &gen_head('a','b','c','d','e','f','g','y');
  &gen_desc_bin('a','b','c','d','e','f','g','y');
  
  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  foreach $e (0..1) {
	    foreach $f (0..1) {
	      foreach $g (0..1) {
		$y = &XOR(&XOR($a,$b) || &XOR($c,$d), $e && &XOR($f,$g));
		print "\n  $a $b $c $d $e $f $g ", $y==0?"0":"1" ;
	      }
	    }
	  }
	}
      }
    }
  }
  print "}\n";
}

sub b7 {
  print "\# b7:   y(a,b,c,d,e,f) = a OR (b XOR c) OR (d AND (e XOR f))\n";
  &gen_head('a','b','c','d','e','f','y');
  &gen_desc_bin('a','b','c','d','e','f','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  foreach $e (0..1) {
	    foreach $f (0..1) {
	      $y = ($a || &XOR($b,$c)) || ($d && &XOR($e,$f));
	      print "\n  $a $b $c $d $e $f ", $y==0?"0":"1" ;
	    }
	  }
	}
      }
    }
  }
  print "}\n";
}

sub b8 {
  print "\# b8:   y(a,b,c,d,e,f) = a XOR b XOR c XOR d XOR e XOR f\n";
  &gen_head('a','b','c','d','e','f','y');
  &gen_desc_bin('a','b','c','d','e','f','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  foreach $e (0..1) {
	    foreach $f (0..1) {
	      $y = &XOR(&XOR(&XOR($a,$b), &XOR($c,$d)), &XOR($e,$f));
	      print "\n  $a $b $c $d $e $f ", $y==0?"0":"1" ;
	    }
	  }
	}
      }
    }
  }
  print "}\n";
}

sub b81 {
  print "\# b81:   y(a,b,c,d,e,f) = a XOR b XOR c XOR d\n";
  &gen_head('a','b','c','d','y');
  &gen_desc_bin('a','b','c','d','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  $y = &XOR(&XOR($a,$b), &XOR($c,$d));
	  print "\n  $a $b $c $d ", $y==0?"0":"1" ;
	}
      }
    }
  }
  print "}\n";
}

sub NOT {
  ($x) = @_;
  return $x?"0":"1";
}

sub b9 {
  print "\# b9:   y(a,b,c,d,e,f,g) = gamberger malignant rule\n";
  &gen_head('a','b','c','d','e','f','g','y');
  &gen_desc_bin('a','b','c','d','e','f','g','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  foreach $e (0..1) {
	    foreach $f (0..1) {
	      foreach $g (0..1) {
		$y = $b && $f || $b && $g ||
		    (&NOT($a) || &NOT($e)) && (&NOT($a) || &NOT($c)) && 
			(&NOT($e) || $b && &NOT($c) ||
			 ($d || $f) && ($g || $b || $d && $f));
		print "\n  $a $b $c $d $e $f $g ", $y?"1":"0" ;
	      }
	    }
	  }
	}
      }
    }
  }
  print "}\n";
}

sub b10 {
  print "\# b10:   y(a,b,c) = a AND (b XOR c)\n";
  &gen_head('a','b','c','y');
  &gen_desc_bin('a','c','y');
  print "b in {0,1,2}\n";

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..2) {
      foreach $c (0..1) {
	$y = $a && (&XOR($b,$c));
	print "\n  $a $b $c ", $y==0?"0":"1" ;
      }
    }
  }
  print "}\n";
}

# this creates problems

sub b11 {
  print "\# b11:   y(a,b,c,d) = a OR (b XOR c) AND d\n";
  &gen_head('a','b','c','y');
  &gen_desc_bin('a','b','c','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	$y = &XOR($a,$b) || $a && $c;
	print "\n  $a $b $c ", $y==0?"0":"1" ;
      }
    }
  }
  print "}\n";
}

sub b12 {
  print "\# b12:   y(a,b,c,d) = (a AND b) OR (a XOR c)\n";
  &gen_head('a','b','c','y');
  &gen_desc_bin('a','b','c','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	$y = $a && $b || &XOR($a,$c);
	print "\n  $a $b $c ", $y==0?"0":"1" ;
      }
    }
  }
  print "\n}\n";
}

sub b13 {
  print "\# b13:   y(a,b,c,d) = (a AND b) OR (a XOR c AND d)\n";
  &gen_head('a','b','c','d','y');
  &gen_desc_bin('a','b','c','d','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  $y = $a && $b || &XOR($a, $c && $d);
	  print "\n  $a $b $c $d ", $y==0?"0":"1" ;
	}
      }
    }
  }
  print "\n}\n";
}

sub b14 {
  print "\# b14:   y(x1,x2,x3,x4) = (x1 XOR x2) AND (x3 OR x4)d\n";
  &gen_head('x1','x2','x3','x4','y');
  &gen_desc_bin('x1','x2','x3','x4','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $x1 (0..1) {
    foreach $x2 (0..1) {
      foreach $x3 (0..1) {
	foreach $x4 (0..1) {
	  $y = &XOR($x1,$x2) && ($x3 || $x4);
	  print "\n  $x1 $x2 $x3 $x4 ", $y==0?"0":"1" ;
	}
      }
    }
  }
  print "}\n";
}

sub b15 {
  print "\# b15:   y(a,b,c,d) = (a AND b) OR (c XOR c)\n";
  &gen_head('a','b','c','d','y');
  &gen_desc_bin('a','b','c','d','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  $y = $a && $b || &XOR($c,$d);
	  print "\n  $a $b $c $d ", $y==0?"0":"1" ;
	}
      }
    }
  }
  print "\n}\n";
}

sub b16 {
  print "\# b15:   y(a,b,c,d) = (a XOR b) AND (c OR d)\n";
  &gen_head('a','b','c','d','y');
  &gen_desc_bin('a','b','c','d','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  $y = &XOR($a,$b) && ($c || $d);
	  print "\n  $a $b $c $d ", $y==0?"0":"1" ;
	}
      }
    }
  }
  print "\n}\n";
}

#########################################################################
# kdd functions are from Ross

sub kdd1 {
  print "\# kdd1:   \n";
  &gen_head('a','b','c','y');
  &gen_desc_bin('a','b','c','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	$y = $a && $c || !$b;
	print "\n  $a $b $c ", $y==0?"0":"1" ;
      }
    }
  }
  print "}\n";
}

sub kdd2 {
  print "\# kdd3:   \n";
  &gen_head('a','b','c','d','y');
  &gen_desc_bin('a','b','c','d','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  $y = !($a || $b) || ((!$a) && $c && $d);
	  print "\n  $a $b $c ", $y==0?"0":"1" ;
	}
      }
    }
  }
  print "}\n";
}

sub kdd {
  print "\# kdd3:   \n";
  &gen_head('a','b','c','d','e','f','g','h','y');
  &gen_desc_bin('a','b','c','d','e','f','g','h','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  foreach $e (0..1) {
	    foreach $f (0..1) {
	      foreach $g (0..1) {
		foreach $h (0..1) {
		  $y = &XOR($b,$d) && &XOR(!$a,&XOR(&XOR($e,$g),$h));
		  print "\n  $a $b $c ", $y==0?"0":"1" ;
		}
	      }
	    }
	  }
	}
      }
    }
  }
  print "}\n";
}

########################################################################
# MULTI-VALUED FUNCTIONS
# complete set of examples is provided (all combinations of attributes
# are given

sub MAX {
  local(@in) = @_;
  local($max, $i);
  $max =$in[0];
  foreach $i (@in) {
    $max = $i if ($i>$max);
  }
  return $max;
}

sub MIN {
  local(@in) = @_;
  local($min, $i);
  $min =$in[0];
  foreach $i (@in) {
    $min = $i if ($i<$min);
  }
  return $min;
}

sub MAJ {
  local(@in) = @_;
  local($max, $i);
  $max = 0;
  foreach $i (@in) {
    $max += $i;
  }
  return int(($max)/($#in+1)+0.5);
}

sub m0 {
  print "\# b1:   y(a,b,c,d) = MIN(MAX(a,b),c)\n";
  &gen_head('a','b','c','y');
  &gen_desc_num('a',2,'b',4,'c',3,'y',4);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..3) {
      foreach $c (0..2) {
	$y = &MIN(&MAX($a,$b),$c);
	print "\n  $a $b $c $y";
      }
    }
  }
  print "}\n";
}

sub m1 {
  print "\# b1:   y(a,b,c,d) = MAX(MIN(a,b),c)\n";
  &gen_head('a','b','c','y');
  &gen_desc_num('a',2,'b',4,'c',3,'y',4);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..3) {
      foreach $c (0..2) {
	$y = &MAX(&MIN($a,$b),$c);
	print "\n  $a $b $c $y";
      }
    }
  }
  print "}\n";
}

sub m2 {
  print "\# m2:   y(a,b,c,d) = MAX(a,b,c,d)\n";
  &gen_head('a','b','c','d','y');
  &gen_desc_num('a',3,'b',3,'c',3,'d',3,'y',3);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..2) {
    foreach $b (0..2) {
      foreach $c (0..2) {
	foreach $d (0..2) {
	  $y = &MAX(&MAX($a,$b),&MAX($c,$d));
	  print "\n  $a $b $c $d $y";
	}
      }
    }
  }
  print "}\n";
}

sub m3 {
  print "\# m3:   y(a,b,c,d) = MAX(MIN(a,b),c,d)\n";
  &gen_head('a','b','c','d','y');
  &gen_desc_num('a',3,'b',3,'c',3,'d',3,'y',3);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..2) {
    foreach $b (0..2) {
      foreach $c (0..2) {
	foreach $d (0..2) {
	  $y = &MAX(&MIN($a,$b),$c,$d);
	  print "\n  $a $b $c $d $y";
	}
      }
    }
  }
  print "}\n";
}

sub m5 {
  print "\# m5:   y(a,b,c,d) = MIN(MAX(a,b),MIN(c,MAX(d,e)))\n";
  &gen_head('a','b','c','d','e','y');
  &gen_desc_bin('a','b','c','d','e','y');

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..1) {
    foreach $b (0..1) {
      foreach $c (0..1) {
	foreach $d (0..1) {
	  foreach $e (0..1) {
	    $y = &MIN(&MAX($a,$b),&MIN($c,&MAX($d,$e)));
	    print "\n  $a $b $c $d $e $y";
	  }
	}
      }
    }
  }
  print "}\n";
}

sub m6 {
  print "\# m6:   y(a,b,c,d) = MIN(MAX(a,b),MIN(c,MAX(d,e)))\n";
  &gen_head('a','b','c','d','e','y');
  &gen_desc_num('a',4,'b',4,'c',4,'d',4,'e',4,'y',4);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..3) {
    foreach $b (0..3) {
      foreach $c (0..3) {
	foreach $d (0..3) {
	  foreach $e (0..3) {
	    $y = &MIN(&MAX($a,$b),&MIN($c,&MAX($d,$e)));
	    print "\n  $a $b $c $d $e $y";
	  }
	}
      }
    }
  }
  print "}\n";
}

sub m7 {
  print "\# b7:   y(a,b,c,d) = MAX(MIN(a,b),c)\n";
  &gen_head('a','b','c','y');
  &gen_desc_num('a',4,'b',4,'c',4,'y',4);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..3) {
    foreach $b (0..3) {
      foreach $c (0..3) {
	$y = &MAX(&MIN($a,$b),$c);
	print "\n  $a $b $c $y";
      }
    }
  }
  print "}\n";
}

sub m8 {
  print "\# m8:   y(a,b,c,d) = MAX(MIN(a,b),c)\n";
  &gen_head('a','b','c','y');
  &gen_desc_num('a',3,'b',3,'c',3,'y',3);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..2) {
    foreach $b (0..2) {
      foreach $c (0..2) {
	$y = &MAX(&MIN($a,$b),$c);
	print "\n  $a $b $c $y";
      }
    }
  }
  print "}\n";
}

sub m91 {
  print "\# m91:   y(a,b,c,d,e) = MIN(MAJ(a,b,c),MAJ(a,d,e))\n";
  $k = 2;
  &gen_head('a','b','c','d','e','y');
  &gen_desc_num('a',$k,'b',$k,'c',$k,'d',$k,'e',$k,'y',$k);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..$k-1) {
    foreach $b (0..$k-1) {
      foreach $c (0..$k-1) {
	foreach $d (0..$k-1) {
	  foreach $e (0..$k-1) {
	    $y = &MIN(&MAJ($a,$b,$c), &MAJ($a,$d,$e));
	    print "\n  $a $b $c $d $e $y";
	  }
	}
      }
    }
  }
  print "}\n";
}

sub m92 {
  print "\# m92:   y(a,b,c,d,e) = MAX(MIN(a,b,c),MAJ(a,d,e))\n";
  $k = 3;
  &gen_head('a','b','c','d','e','y');
  &gen_desc_num('a',$k,'b',$k,'c',$k,'d',$k,'e',$k,'y',$k);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..$k-1) {
    foreach $b (0..$k-1) {
      foreach $c (0..$k-1) {
	foreach $d (0..$k-1) {
	  foreach $e (0..$k-1) {
	    $y = &MAX(&MIN($a,$b,$c), &MAJ($a,$d,$e));
	    print "\n  $a $b $c $d $e $y";
	  }
	}
      }
    }
  }
  print "}\n";
}

sub m93 {
  print "\# m93:   y(a,b,c) = MAJ(a,b,MIN(a,c))\n";
  $k = 3;
  &gen_head('a','b','c','y');
  &gen_desc_num('a',$k,'b',$k,'c',$k,'y',$k);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..$k-1) {
    foreach $b (0..$k-1) {
      foreach $c (0..$k-1) {
	$y = &MAJ($a,$b,&MIN($a,$c));
	print "\n  $a $b $c $y";
      }
    }
  }
  print "}\n";
}

sub CMP {
  local($a,$b) = @_;
  return 0 if ($a<$b);
  return 1 if ($a==$b);
  return 2 if ($a>$b);
}

sub m94 {
  print "\# m93:   y(a,b,c) = MAX(MIN(a,b),CMP(a,c))\n";
  $k = 3;
  &gen_head('a','b','c','y');
  &gen_desc_num('a',$k,'b',$k,'c',$k,'y',$k);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..$k-1) {
    foreach $b (0..$k-1) {
      foreach $c (0..$k-1) {
	$y = &MAX(&MIN($a,$b),&CMP($a,$c));
	print "\n  $a $b $c $y";
      }
    }
  }
  print "}\n";
}

sub twosaw {
  local($x) = @_;
  return 0 if ($x==0 || $x==2 || $x==4);
  return 1 if ($x==1);
  return -1 if ($x==3);
}

sub m9 {
  print "\# m9:   y(a,b,c) = a + twosaw(b * c)\n";
  print "\#                  twosaw(0,2,4)=0, (1)=1, (3)=-1\n";
  &gen_head('a','b','c','y');
  &gen_desc_num('a',3,'b',3,'c',3,'y',4);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..2) {
    foreach $b (0..2) {
      foreach $c (0..2) {
	$y = $a + &twosaw($b * $c);
	print "\n  $a $b $c $y";
      }
    }
  }
  print "}\n";
}

sub m10 {
  print "\# m10:   y(a,b,c) = a + twosaw(b + c)\n";
  print "\#                  twosaw(0,2,4)=0, (1)=1, (3)=-1\n";
  &gen_head('a','b','c','y');
  &gen_desc_num('a',3,'b',3,'c',3,'y',5);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..2) {
    foreach $b (0..2) {
      foreach $c (0..2) {
	$y = $a + &twosaw($b + $c);
	print "\n  $a $b $c ",$y+1;
      }
    }
  }
  print "}\n";
}


sub m12 {
  print "\# m12:   y(a,b,c,d,e) = MIN(a,MAJ(b,MAX(c,d),e))\n";
  $k = 5;
  &gen_head('a','b','c','d','e','y');
  &gen_desc_num('a',$k,'b',$k,'c',$k,'d',$k,'e',$k,'y',$k);

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..$k-1) {
    foreach $b (0..$k-1) {
      foreach $c (0..$k-1) {
	foreach $d (0..$k-1) {
	  foreach $e (0..$k-1) {
	    $y = &MIN($a,&MAJ($b,&MAX($c,$d),$e));
	    print "\n  $a $b $c $d $e $y";
	  }
	}
      }
    }
  }
  print "}\n";
}

sub pal {
  print "\# palindrom:   y(a,b,c,d,e,f) = palindrom(a,b,c,d,e,f)\n";
  $k = 3;
  &gen_head('a','b','c','d','e','f','y');
  &gen_desc_num('a',$k,'b',$k,'c',$k,'d',$k,'e',$k,'f',$k);
  print "y in {0,1}\n";

  print "sel $gnames[$#gnames]\n";
  print "rule table {";
  foreach $a (0..$k-1) {
    foreach $b (0..$k-1) {
      foreach $c (0..$k-1) {
	foreach $d (0..$k-1) {
	  foreach $e (0..$k-1) {
	    foreach $f (0..$k-1) {
	      $y = $a==$f && $b==$e && $c==$d;
	      $y = $y ? 1 : 0;
	      print "\n  $a $b $c $d $e $f $y";
	    }
	  }
	}
      }
    }
  }
  print "}\n";
}

########################################################################
# DISCRETIZED REAL FUNCTIONS, COMPLETE SAMPLE
# some additional rutines are needed to support this
#
# $nin - number of attributes
# $nr - number of rules (#examples that cover whole space)
# @ndesc - number of intervals per attribute
# @names - attribute and output class name (class is last)
# @max, @min - max and min of attributes and class
# @ilen - length of the interval
# @att - descrete values of the attributes (class last)



sub indx2att {
  local($indx) = @_;
  local($j,$n);

  for ($n=1, $j=$nin-1; $j >= 0; $n*=$ndesc[$j], $j--) {
    $att[$j] = ($indx / $n) % $ndesc[$j];
  }
  return @att;
}

sub drf_ini {
  local($ii);
  $nin = $#names;
  for ($nr=1, $ii=0; $ii < $nin; $ii++) {
    $nr *= $ndesc[$ii];
  }
  foreach $ii (0..$nin-1) {
    $ilen[$ii] = ($max[$ii] - $min[$ii]) / $ndesc[$ii];
  }
}

sub set_att {
  local($indx) = @_;
  local($ii, $val);

  @att = &indx2att($indx);
  foreach $ii (0..$nin-1) {
    $val = $min[$ii] + $ilen[$ii] / 2. + $att[$ii] * $ilen[$ii];
    $toeval= sprintf('$%s = $val;', $names[$ii]);
    eval($toeval);
  }
}

sub find_limits {
  local($func) = @_;
  local($indx, $min, $max, $val);

  &set_att(0);
  $min = $max = eval($func);
  
  foreach $ii (1..$nr-1) {
    &set_att($ii);
    $val = eval($func);
    $max = $val if ($max < $val);
    $min = $val if ($min > $val);
  }
  $min[$nin] = $min; $max[$nin] = $max;
  $ilen[$nin] = ($max[$nin] - $min[$nin]) / $ndesc[$nin];
#  foreach $i (0..$nin) {
#    print "xx ", $ilen[$i], "\n";
#  }
}

sub output_function {
  local($func) = @_;
  local($ii);

  &drf_ini;
  &find_limits($func);
  &gen_head(@names);
  foreach $ii (0..$nin) {
    $tmp[$ii*2] = $names[$ii];
    $tmp[$ii*2+1] = $ndesc[$ii];
  }
  &gen_desc_num(@tmp);

  print "sel $names[$#names]\n";
  print "rule table {";
#  foreach $ii (0..5) {
  foreach $ii (0..$nr-1) {
    &set_att($ii);
#    print "$a $b $c\n";
    $yy = eval($func);
    $int = ($yy - $min[$nin]) / $ilen[$nin];
    $int = $ndesc[$nin]-1 if ($int > $ndesc[$nin]-1); # round error
#    printf("%6.3lf -> %d\n", $yy, $int);
    $att[$nin] = $int;
    print "\n";
    foreach $jj (0..$nin) {
      printf("%d ", $att[$jj]);
    }
#    printf("$yy $min[3] $max[3]\n");
#    print "\n$a $b $c $d $yy";
  }
  print "}\n";
}

@dr_des = ("\# dr0:    none",
	   "\# dr1:    y(a,b,c) = a + b * c",
	   "\# dr2:    y(a,b,c) = (a + b) * c",
	   "\# dr3:    y(a,b,c,d) = a + (b + c) * d",
	   "\# dr4:    y(a,b,c,d,e) = a + (b + c) * (d + e)",
	   "\# dr5:    y(a,b,c) = a + b / c",
	   "\# dr6:    y(a,b,c) = a - b / c",
	   "\# dr7:    y(a,b,c,d,e) = a + (b - c) * (d + e)",
	   "\# dr8:    y(a,b,c,d,e) = a + (b / c) - (d * e)",
	   "\# dr9:    y(a,b,c) = a + exp(b + c)",
	   "\# dr10:   y(a,b,c) = a + exp(b + c)",
	   "\# dr11:   y(a,b,c) = a + sin(b + c)",
	   "\# dr12:   y(a,b,c) = a + d * sin(b + c)",
	   "\# dr13:   y(a,b,c) = a + d * sin(b + c) * cos(e + f)",
	   "\# dr14:   y(a,b,c) = a + exp(b + c))",
	   "\# dr15:   y(a,b,c) = a + e * sin(b + PI * cos(c + d) )",
	   "\# dr16:   y(a,b,c) = a + log(b + c)",
	   "\# dr17:   y(a,b,c,d) = a + log(b + c + d)",
	   "\# dr18:   a * sin(b * c)",
	   "\# dr19:   a * sin(b * c * d)"
	   );


sub dr1 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0,0);
  @max = (10,10,10,10);
  @ndesc = (5,5,5,10);

  print $dr_des[1], "\n";
  &output_function('$a + $b * $c');
}

sub dr2 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0,0);
  @max = (10,10,10,10);
  @ndesc = (3,3,3,3);

  print $dr_des[2], "\n";
  &output_function('($a + $b) * $c');
}

sub dr3 {
  @names = ('a', 'b', 'c', 'd', 'y');
  @min = (0,0,0,0,0);
  @max = (10,10,10,10,10);
  @ndesc = (5,5,5,5,20);

  print $dr_des[3], "\n";
  &output_function('$a + ($b + $c) * $d');
}

sub dr4 {
  @names = ('a', 'b', 'c', 'd', 'e', 'y');
  @min = (0,0,0,0,0,0);
  @max = (10,10,10,10,10,10);
  @ndesc = (5,5,5,5,5,20);

  print $dr_des[4], "\n";
  &output_function('$a + ($b + $c) * ($d + $e)');
}

sub dr5 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0,0);
  @max = (10,10,10,10);
  @ndesc = (5,5,5,10);

  print $dr_des[5], "\n";
  &output_function('$a + $b / $c');
}

sub dr6 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0,0);
  @max = (10,10,10,10);
  @ndesc = (5,5,5,10);

  print $dr_des[6], "\n";
  &output_function('$a - $b / $c');
}

sub dr7 {
  @names = ('a', 'b', 'c', 'd', 'e', 'y');
  @min = (0,0,0,0,0,0);
  @max = (10,10,10,10,10,10);
  @ndesc = (5,5,5,5,5,20);

  print $dr_des[7], "\n";
  &output_function('$a + ($b - $c) * ($d + $e)');
}

sub dr8 {
  @names = ('a', 'b', 'c', 'd', 'e', 'y');
  @min = (0,0,0,0,0,0);
  @max = (10,10,10,10,10,10);
  @ndesc = (5,5,5,5,5,20);

  print $dr_des[8], "\n";
  &output_function('$a + ($b / $c) - ($d * $e)');
}

sub dr9 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0,0);
  @max = (10,2,2,10);
  @ndesc = (5,5,5,50);

  print $dr_des[9], "\n";
  &output_function('$a + exp($b + $c)');
}

sub dr10 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0,0);
  @max = (0.1,2,2,10);
  @ndesc = (5,5,5,50);

  print $dr_des[10], "\n";
  &output_function('$a + exp($b + $c)');
}

sub dr11 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0);
#  @max = (1, 3.14159, 3.14159);
#  @ndesc = (4,4,4,4);
  @max = (1, 10, 7);
  @ndesc = (4,3,7,4);

  print $dr_des[11], "\n";
  &output_function('$a + sin($b+$c)');
}

sub dr12 {
  @names = ('a', 'b', 'c', 'd', 'y');
  @min = (0,0,0,0);
  @max = (1, 3.14159, 3.14159, 1);
#  @ndesc = (8,8,8,8,10);
  @ndesc = (4,4,4,4,5);

  print $dr_des[12], "\n";
  &output_function('$a + $d * sin($b + $c)');
}

sub dr13 {
  @names = ('a', 'b', 'c', 'd', 'e', 'f', 'y');
  @min = (0,0,0,0,0,0);
  @max = (1, 3.14159, 3.14159, 1, 3.14159, 3.14159);
  @ndesc = (4,4,4,4,4,4,5);

  print $dr_des[13], "\n";
  print "set dec knn 31\n";
  &output_function('$a + $d * sin($b + $c) * cos($e + $f)');
}

sub dr14 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0);
  @max = (3, 1, 1);
  @ndesc = (4, 4, 4, 4);

  print $dr_des[14], "\n";
  &output_function('$a + exp($b + $c)');
}

sub dr15 {
  @names = ('a', 'b', 'c', 'd', 'e', 'y');
  @min = (0,0,0,0,0);
  @max = (1, 3.14159, 3.14159, 3.14159, 1);
#  @ndesc = (8,8,8,8,10);
  @ndesc = (4,4,4,4,4,5);

  print $dr_des[15], "\n";
  &output_function('$a + $e * sin($b + 3.14159 * cos($c + $d))');
}

sub dr16 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0);
#  @max = (1, 3.14159, 3.14159);
#  @ndesc = (4,4,4,4);
  @max = (5, 10, 100);
  @ndesc = (8,8,8,8);

  print $dr_des[16], "\n";
  &output_function('$a - log($b*$b+$c)');
}

sub dr17 {
  @names = ('a', 'b', 'c', 'd', 'y');
  @min = (0,0,0,0);
  @max = (5, 10, 10,10);
  @ndesc = (4,4,4,4,4);

  print $dr_des[17], "\n";
  &output_function('$a - log($b + $c + $d)');
}

sub dr18 {
  @names = ('a', 'b', 'c', 'y');
  @min = (0,0,0);
  @max = (10, 10, 10);
  @ndesc = (4,4,4,4);
#  @ndesc = (10,10,10,8);

  print $dr_des[18], "\n";
  &output_function('$a * sin($b * $c)');
}

sub dr19 {
  @names = ('a', 'b', 'c', 'd', 'y');
  @min = (0,0,0,0);
  @max = (10, 10, 10, 10);
#  @ndesc = (4,4,4,4,6);
  @ndesc = (7,7,7,7,6);

  print $dr_des[19], "\n";
  &output_function('$a * sin($b * $c * $d)');
}

########################################################################
# MAIN PIECE OF CODE


#@a = (0,1,1,0,1,0,0);
#print $#a, "  ", &MAJ(@a), "\n";
#die "ok\n";

&Getopt('fn');

$n_opt = $opt_n ? $opt_n : 10;

if (! $opt_f) {
  print "gen.pl -ffunct -nN -i\n";
  print " -i defines that interval points are printed for real functions\n";
  print "    instead of midpoint (default)\n";
  print "BOOLEAN FUNCTIONS, COMPLETE SET\n";
  print "  b0  - y(a,b,c) = a AND (b XOR c)\n";
  print "  b1  - y(a,b,c,d) = a OR (b XOR c) AND d\n";
  print "  b2  - y(a,b,c,d) = a AND (b XOR c)\n";
  print "        same as b0, d redundant, b has one val redundant\n";
  print "  b3  - y(a,b,c,d,e,f,g,h) = a OR (b XOR c) AND d\n";
  print "        same as b1, e, f, g, h redundant\n";
  print "  b4  - y(a,b,c) = a AND (b OR c)\n";  
  print "  b5  - y(a,b,c,d,e) = (a OR b) AND (c AND (d OR e))\n";
  print "  b6  - y(a,b,c,d,e,f,g) = ((a XOR b) OR (c XOR d)) XOR (e AND (f XOR g))\n";
  print "  b7  - y(a,b,c,d,e,f) = a OR (b XOR c) OR (d AND (e XOR f))\n";
  print "  b8  - y(a,b,c,d,e,f) = a XOR b XOR c XOR d XOR e XOR f\n";
  print "  b12 - y(a,b,c,d) = (a AND b) OR (a XOR c)\n";
  print "  b13 - y(a,b,c,d) = (a AND b) OR (a XOR c AND d)\n";
  print "  b14:   y(x1,x2,x3,x4) = (x1 XOR x2) AND (x3 OR x4)d\n";

  print "\nMULTI-VALUED FUNCTIONS, COMPLETE SET\n";
  print "  m0  - y(a,b,c) = MIN(MAX(a, b), c), complete\n";
  print "                   a=[0,1], b=[0,3], c=[0,2]\n";
  print "  m1  - y(a,b,c) = MAX(MIN(a, b), c), complete\n";
  print "                   a=[0,1], b=[0,3], c=[0,2]\n";
  print "  m2  - y(a,b,c) = MAX(MAX(a, b), MAX(c, d)), complete\n";
  print "                   a=[0,2], b=[0,2], c=[0,2], d=[0,2]\n";
  print "  m3    y(a,b,c,d) = MAX(MIN(a,b),c,d)\n";
  print "  m5  - y(a,b,c,d,e) = MIN(MAX(a,b),MIN(c,MAX(d,e))), ct, all [0,1]\n";
  print "  m6  - y(a,b,c,d,e) = MIN(MAX(a,b),MIN(c,MAX(d,e))), ct, all [0,3]\n";
  print "  m7  - y(a,b,c) = MAX(MIN(a, b), c), ct, all [0,3]\n";
  print "  m8  - y(a,b,c) = MAX(MIN(a, b), c), ct, all [0,2]\n";
  print "  m9, m10 - saw\n";
  print "  m12 - y(a,b,c,d,e) = MIN(a,MAJ(b,MAX(c,d),e))\n";
  print "\nREAL FUNCTIONS (R^n -> R), RANDOM SAMPLE\n";
  print "  saw - Babuska, x=[-1.5,2.5], y=f(x)\n";
  print "  r0  - y=a+b   [0,2]\n";
  print "  r1  - y=a+b*c [0,2]\n";
  print "\nREAL DISCRETIZED FUNCTIONS, FULL SAMPLE\n";
  foreach $i (0..$#dr_des-1) {
    print $dr_des[$i], "\n";
  }

  print "xxx ", &MAJ(1,2),"\n";
  die "\n";
}

#print "set rule table\n";
#print "set dm yes\n";
$seval = sprintf("&%s;",$opt_f);
#print "to eval $seval\n";
eval($seval);

print "set print 2\n";

#print "set log inf yes\n";
#print "set log gr yes\n";
#print "set log gini yes\n";
#print "#set log relieff yes\n";

print "set dec deb 2\n";
#print "test dec y\n";
#print "set dec 2 to 3\n";
print "decompose y\n";
print "echo  \necho Induced structure:\n";
print "ls struct\n";
#print "pjoin c and a of y to x\n";
print "quit\n"

